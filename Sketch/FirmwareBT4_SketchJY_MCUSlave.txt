/********Sketch Arduino*********************************************
 Grupo: www.tinyurl.com/SanUSB 
 video-aulas: www.youtube.com/SanUSB2

 Funciona para todos os APKs android disponiveis em :https://play.google.com/store pesquisar por SanUSB.
 Utiliza modem bluetooth slave (Linvor v.104 ou Linvor v.106, HC-04, HC-06, JY-MCU, etc.)


 Video-aulas: https://www.youtube.com/watch?v=V65-Vt91rug ,  http://www.youtube.com/watch?v=5bOcVZqi0GM e

 http://www.youtube.com/watch?v=vtS2rq_sO5M  

 Mercado Livre: http://lista.mercadolivre.com.br/sanusb

Ligacoes dos pinos do modem bluetooth (desconectar o modem dos pinos 0 (Rx) e 1 (Tx) da serial para gravar o microcontrolador (upload) 
e depois de gravar, conectar novamente os pinos Rx do modem no pino 0 e Tx no pino 1 do arduino:
Bluetooth--------Microcontrolador
RX--------------- PINO 1 (Tx)
TX----------------PINO 0 (Rx)
GND---------------GND
VCC---------------5V
Quando o Led no pino 13 estiver piscando constantemente, significa que o circuito e o programa foram executados com sucesso.
Resetar o microcontrolador antes de conectar ao Android*/
#include <EEPROM.h>

#define pinored 9     //3   //pinos para serem conectados ao led RGB
#define pinoblue 10   //5
#define pinogreen 11  //6


short int pisca=0, chegou=0, flag=0, c=0, flagRGB=0, rgb_interrupt = 0, flagstart=0, flagBD=0;
unsigned char comando[30], comand[30], n=0, m=0, k=0, c1=0, i=0;
int redvalue=0, greenvalue=0, bluevalue=0;
unsigned char S=130>>1, a=168>>1, an=86>>1, u=132>>1,s=130>>1, b=170>>1,x=136>>1,z=106>>1, BD=4;

void setup()  
{
  pinMode(13, OUTPUT); 
  taxa_serial(9600);  
  pinMode(pinored, OUTPUT);
  pinMode(pinogreen, OUTPUT);
  pinMode(pinoblue, OUTPUT);
 UBRR0H =0x00;UBRR0L =0x33;  
  for(m=0;m<=25;m++){comando[m]=32;}
  for(m=0;m<=25;m++){comand[m]=32;}  
 
    m=EEPROM.read(250); 
   if(m<=12 || m==255){EEPROM.write(251, 0); } 
 //Es vusucht mindestens einaml shreiben, wenn es lehr ist.
   UBRR0H =0x00;UBRR0L =0x33; 
}

void serial_putc(char c) 
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
}

ISR(USART_RX_vect)
{
  char ReceivedChar;
  ReceivedChar  = UDR0; 
  comando[n]=ReceivedChar; comand[n]= comando[n]&0x55; 

  if ((comando[0]!='L' || comando[0]!=79) && flagstart==0) {flagstart=1; flagBD=1; n=0;}

  if (comando[0]!=79) {chegou=0; pisca=0;}

  if (n>=13 && comando[1]==84) {flag=1;m=n;} 
++n; 

switch (comando[0])
	{
   case  79 : { chegou=1; flag=0; m=0;} 
   break;
   case 'R' : { if (n>=4)  {analogWrite(pinored, 255-comando[1]); //Led RGB anodo comum//
                            analogWrite(pinogreen, 255-comando[2]);
                            analogWrite(pinoblue, 255-comando[3]); n=0; comando[0]=32;//Apaga R 
                            rgb_interrupt = !rgb_interrupt; digitalWrite(13, rgb_interrupt);}}
                            
   /*   case 'R' : { if (n>=4)  {analogWrite(pinored, comando[1]); //Led RGB catodo comum//
                            analogWrite(pinogreen, comando[2]);
                            analogWrite(pinoblue, comando[3]); n=0; comando[0]=32;//Apaga R 
                            rgb_interrupt = !rgb_interrupt; digitalWrite(13, rgb_interrupt);}}
   */
   break;
   case 'L' : {flag=0; n=0; c=1; flagBD=0; digitalWrite(13, HIGH);} 
   break;
   case 'D' : {flag=0; n=0; digitalWrite(13, LOW);}
   break;
   case 'P': { pisca=1; flag=0; n=0; } 
   break; 

          }
				
}
 
void taxa_serial(unsigned long baud)
{
  unsigned int baud_sanusb = (F_CPU / 16 / baud) - 1;
  UBRR0H = (unsigned char)(baud_sanusb >> 8);
  UBRR0L = (unsigned char)baud_sanusb;
  UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
  UCSR0B |= _BV(RXCIE0);
  UCSR0B &= ~_BV(TXCIE0);
  UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);
}

void loop() {

  while (chegou==1){ if(flagBD==0 && c1<3){ c1=3; EEPROM.write(251, c1); flag=0;} serial_putc(79);
  serial_putc(75);serial_putc(32); digitalWrite(13, HIGH);delay(200); digitalWrite(13, LOW); delay(200); n=0;}

  while (pisca==1){digitalWrite(13, HIGH);  delay(300); digitalWrite(13, LOW); delay(300);n=0; }

    if (flagBD==1 && chegou==0 && c==0){ 
    UBRR0H =0x00;UBRR0L =0x67;
    serial_putc(S); serial_putc(a); serial_putc(an); serial_putc(u); 
    serial_putc(s); serial_putc(b); serial_putc(x); serial_putc(z); 
    delay(1000); rgb_interrupt = !rgb_interrupt; digitalWrite(13, rgb_interrupt);
    UBRR0H =0x00;UBRR0L =0x33;           } 
  
  
  
      if (flag==1){ flag=0; rgb_interrupt = !rgb_interrupt; digitalWrite(13, rgb_interrupt);
                  if (m==12) {comand[1]=a;comand[3]=78;comand[5]=77;comand[8]=S;comand[10]=b;comand[12]=u; 
                  for(k=0;k<=m;k++){serial_putc(comand[k]);}
                  for(k=m+1;k<25;k++){serial_putc(32);}
                   ++i;if(i>=5){i=0;flagBD=1;}            
                             }
      EEPROM.write(250, m); //PLatz von m-Byte-Zaeler
  
      if (c==1){ 
      for(m=0;m<=25;m++){serial_putc(comand[m]|comando[m]);}
      for(m=0;m<=25;m++){comando[m]=32;comand[m]=32;} 
      n=0;m=0; }          
       } 
 delay(1000);  
     
     c1=EEPROM.read(251); 
     if (c==0 && c1<3 && flagBD==0){
     flag=1; m=12;
     comand[0]=S;comand[2]=an;comand[4]=S;comand[6]=69;comand[7]=83;comand[9]=78;comand[11]=83; 
                          }                  
 
  delay(1000);
n=0; 
            }